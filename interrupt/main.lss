
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000306  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006a  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000998  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a0  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000547  00000000  00000000  00000f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fe  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003b7  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000150  00000000  00000000  000019dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  8e:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_LCD>:

}

void LCD_cmd(unsigned char cmd)
{
LCD_ctrl =(0<<rs)|(0<<rw)|(1<<en);
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	85 b9       	out	0x05, r24	; 5
//LCD_ctrl = 0X04;
LCD_DATA=cmd;
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	8b b9       	out	0x0b, r24	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	80 ed       	ldi	r24, 0xD0	; 208
  a0:	97 e0       	ldi	r25, 0x07	; 7
  a2:	fc 01       	movw	r30, r24
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <init_LCD+0xe>

_delay_ms(1);
LCD_ctrl =(0<<rs)|(0<<rw)|(0<<en);
  a8:	15 b8       	out	0x05, r1	; 5
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <init_LCD+0x14>
  ae:	84 ef       	ldi	r24, 0xF4	; 244
  b0:	91 e0       	ldi	r25, 0x01	; 1
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b2:	28 ec       	ldi	r18, 0xC8	; 200
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <init_LCD+0x22>
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <init_LCD+0x20>

}

void LCD_cmd(unsigned char cmd)
{
LCD_ctrl =(0<<rs)|(0<<rw)|(1<<en);
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	85 b9       	out	0x05, r24	; 5
//LCD_ctrl = 0X04;
LCD_DATA=cmd;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	80 ed       	ldi	r24, 0xD0	; 208
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	fc 01       	movw	r30, r24
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <init_LCD+0x38>

_delay_ms(1);
LCD_ctrl =(0<<rs)|(0<<rw)|(0<<en);
  d2:	15 b8       	out	0x05, r1	; 5
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_LCD+0x3e>
  d8:	84 ef       	ldi	r24, 0xF4	; 244
  da:	91 e0       	ldi	r25, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	28 ec       	ldi	r18, 0xC8	; 200
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <init_LCD+0x4c>
  e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e8:	d9 f7       	brne	.-10     	; 0xe0 <init_LCD+0x4a>

}

void LCD_cmd(unsigned char cmd)
{
LCD_ctrl =(0<<rs)|(0<<rw)|(1<<en);
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	85 b9       	out	0x05, r24	; 5
//LCD_ctrl = 0X04;
LCD_DATA=cmd;
  ee:	8e e0       	ldi	r24, 0x0E	; 14
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	80 ed       	ldi	r24, 0xD0	; 208
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	fc 01       	movw	r30, r24
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <init_LCD+0x62>

_delay_ms(1);
LCD_ctrl =(0<<rs)|(0<<rw)|(0<<en);
  fc:	15 b8       	out	0x05, r1	; 5
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <init_LCD+0x68>
 102:	84 ef       	ldi	r24, 0xF4	; 244
 104:	91 e0       	ldi	r25, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 106:	28 ec       	ldi	r18, 0xC8	; 200
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <init_LCD+0x76>
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <init_LCD+0x74>

}

void LCD_cmd(unsigned char cmd)
{
LCD_ctrl =(0<<rs)|(0<<rw)|(1<<en);
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	85 b9       	out	0x05, r24	; 5
//LCD_ctrl = 0X04;
LCD_DATA=cmd;
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	80 ed       	ldi	r24, 0xD0	; 208
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	fc 01       	movw	r30, r24
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <init_LCD+0x8c>

_delay_ms(1);
LCD_ctrl =(0<<rs)|(0<<rw)|(0<<en);
 126:	15 b8       	out	0x05, r1	; 5
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <init_LCD+0x92>
 12c:	84 ef       	ldi	r24, 0xF4	; 244
 12e:	91 e0       	ldi	r25, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 130:	28 ec       	ldi	r18, 0xC8	; 200
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <init_LCD+0xa0>
 13a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d9 f7       	brne	.-10     	; 0x134 <init_LCD+0x9e>
	_delay_ms(50);

	LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
	_delay_ms(50);

}
 13e:	08 95       	ret

00000140 <LCD_cmd>:

void LCD_cmd(unsigned char cmd)
{
LCD_ctrl =(0<<rs)|(0<<rw)|(1<<en);
 140:	94 e0       	ldi	r25, 0x04	; 4
 142:	95 b9       	out	0x05, r25	; 5
//LCD_ctrl = 0X04;
LCD_DATA=cmd;
 144:	8b b9       	out	0x0b, r24	; 11
 146:	80 ed       	ldi	r24, 0xD0	; 208
 148:	97 e0       	ldi	r25, 0x07	; 7
 14a:	fc 01       	movw	r30, r24
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_cmd+0xc>

_delay_ms(1);
LCD_ctrl =(0<<rs)|(0<<rw)|(0<<en);
 150:	15 b8       	out	0x05, r1	; 5
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_cmd+0x12>
//LCD_ctrl = 0X00;
_delay_ms(1);

}
 156:	08 95       	ret

00000158 <LCD_write>:

void LCD_write(unsigned char data)				// Writing a character
{

	LCD_ctrl = (1<<rs)|(0<<rw)|(1<<en);
 158:	95 e0       	ldi	r25, 0x05	; 5
 15a:	95 b9       	out	0x05, r25	; 5
	LCD_ctrl = 0X05;
 15c:	95 b9       	out	0x05, r25	; 5
	LCD_DATA= data;
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	20 ed       	ldi	r18, 0xD0	; 208
 162:	37 e0       	ldi	r19, 0x07	; 7
 164:	c9 01       	movw	r24, r18
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_write+0xe>
	_delay_ms(1);
	LCD_ctrl = (1<<rs)|(0<<rw)|(0<<en);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	c9 01       	movw	r24, r18
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_write+0x18>
	//LCD_ctrl = 0x01;
	_delay_ms(1);

}
 174:	08 95       	ret

00000176 <LCD_String_Write>:




void LCD_String_Write(unsigned char *string)             //store address value of the string in pointer *string
{
 176:	fc 01       	movw	r30, r24
}

void LCD_write(unsigned char data)				// Writing a character
{

	LCD_ctrl = (1<<rs)|(0<<rw)|(1<<en);
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	20 ed       	ldi	r18, 0xD0	; 208
 17c:	37 e0       	ldi	r19, 0x07	; 7
	LCD_ctrl = 0X05;
	LCD_DATA= data;
	_delay_ms(1);
	LCD_ctrl = (1<<rs)|(0<<rw)|(0<<en);
 17e:	71 e0       	ldi	r23, 0x01	; 1
 180:	40 e2       	ldi	r20, 0x20	; 32
 182:	5e e4       	ldi	r21, 0x4E	; 78
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <LCD_String_Write+0x2a>
}

void LCD_write(unsigned char data)				// Writing a character
{

	LCD_ctrl = (1<<rs)|(0<<rw)|(1<<en);
 186:	65 b9       	out	0x05, r22	; 5
	LCD_ctrl = 0X05;
 188:	65 b9       	out	0x05, r22	; 5
	LCD_DATA= data;
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	c9 01       	movw	r24, r18
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_String_Write+0x18>
	_delay_ms(1);
	LCD_ctrl = (1<<rs)|(0<<rw)|(0<<en);
 192:	75 b9       	out	0x05, r23	; 5
 194:	c9 01       	movw	r24, r18
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_String_Write+0x20>
 19a:	ca 01       	movw	r24, r20
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_String_Write+0x26>


void LCD_String_Write(unsigned char *string)             //store address value of the string in pointer *string
{
	int i=0;
	while(string[i]!= '\0')                               // Loop will execute till it detects null character
 1a0:	81 91       	ld	r24, Z+
 1a2:	88 23       	and	r24, r24
 1a4:	81 f7       	brne	.-32     	; 0x186 <LCD_String_Write+0x10>
	LCD_write(string[i]);                            // sending data on LCD byte by byte
	i++;
	_delay_ms(10);
}

}
 1a6:	08 95       	ret

000001a8 <LCD_set_cursor>:



void LCD_set_cursor(char a, char b)
{
	if(a == 1)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <LCD_set_cursor+0x1e>
	LCD_cmd(0x80 + b);
 1ac:	60 58       	subi	r22, 0x80	; 128

}

void LCD_cmd(unsigned char cmd)
{
LCD_ctrl =(0<<rs)|(0<<rw)|(1<<en);
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	85 b9       	out	0x05, r24	; 5
//LCD_ctrl = 0X04;
LCD_DATA=cmd;
 1b2:	6b b9       	out	0x0b, r22	; 11
 1b4:	80 ed       	ldi	r24, 0xD0	; 208
 1b6:	97 e0       	ldi	r25, 0x07	; 7
 1b8:	fc 01       	movw	r30, r24
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_set_cursor+0x12>

_delay_ms(1);
LCD_ctrl =(0<<rs)|(0<<rw)|(0<<en);
 1be:	15 b8       	out	0x05, r1	; 5
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_set_cursor+0x18>
 1c4:	08 95       	ret

void LCD_set_cursor(char a, char b)
{
	if(a == 1)
	LCD_cmd(0x80 + b);
	else if(a == 2)
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	61 f4       	brne	.+24     	; 0x1e2 <LCD_set_cursor+0x3a>
	LCD_cmd(0xC0 + b);
 1ca:	60 54       	subi	r22, 0x40	; 64

}

void LCD_cmd(unsigned char cmd)
{
LCD_ctrl =(0<<rs)|(0<<rw)|(1<<en);
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	85 b9       	out	0x05, r24	; 5
//LCD_ctrl = 0X04;
LCD_DATA=cmd;
 1d0:	6b b9       	out	0x0b, r22	; 11
 1d2:	80 ed       	ldi	r24, 0xD0	; 208
 1d4:	97 e0       	ldi	r25, 0x07	; 7
 1d6:	fc 01       	movw	r30, r24
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_set_cursor+0x30>

_delay_ms(1);
LCD_ctrl =(0<<rs)|(0<<rw)|(0<<en);
 1dc:	15 b8       	out	0x05, r1	; 5
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_set_cursor+0x36>
 1e2:	08 95       	ret

000001e4 <main>:
void LCD_Sting_Write(unsigned char *string) ;
void LCD_set_cursor(char a, char b);


int main(void)
{
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29

    /***************************Prog Initialization**********************************/
	int ones=0x30, tens=0x30, setclk =0, val;
	DDRD|=0xFF;                                  // setting the port B as output
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	8a b9       	out	0x0a, r24	; 10
	DDRB|=0X07;
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	87 60       	ori	r24, 0x07	; 7
 200:	84 b9       	out	0x04, r24	; 4

	
	DDRC=0x00;
 202:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;						// setting for port B pin 0,1,2 as output
 204:	18 b8       	out	0x08, r1	; 8
	init_LCD();
 206:	0e 94 4b 00 	call	0x96	; 0x96 <init_LCD>
 20a:	88 ee       	ldi	r24, 0xE8	; 232
 20c:	93 e0       	ldi	r25, 0x03	; 3
 20e:	28 ec       	ldi	r18, 0xC8	; 200
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	f9 01       	movw	r30, r18
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 218:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21a:	d9 f7       	brne	.-10     	; 0x212 <main+0x2e>
	_delay_ms(100);  // initialization of LCD

     /***************************************************************************/


	LCD_String_Write("Press Start");
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_String_Write>
	while(setclk == 0)
	{
	PORTC = 0x00;
 224:	18 b8       	out	0x08, r1	; 8


	//if(bit_is_set(PINC,PC1))
	//{
		setclk = 1;
		LCD_set_cursor(1,0);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_set_cursor>
		LCD_String_Write("Time Count =");
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_String_Write>
 236:	00 e3       	ldi	r16, 0x30	; 48
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	c0 e3       	ldi	r28, 0x30	; 48
 23c:	d0 e0       	ldi	r29, 0x00	; 0
}

void LCD_write(unsigned char data)				// Writing a character
{

	LCD_ctrl = (1<<rs)|(0<<rw)|(1<<en);
 23e:	25 e0       	ldi	r18, 0x05	; 5
 240:	d2 2e       	mov	r13, r18
 242:	90 ed       	ldi	r25, 0xD0	; 208
 244:	e9 2e       	mov	r14, r25
 246:	97 e0       	ldi	r25, 0x07	; 7
 248:	f9 2e       	mov	r15, r25




    while(setclk == 1)
	{	PORTC = 0x00;
 24a:	88 ec       	ldi	r24, 0xC8	; 200
 24c:	a8 2e       	mov	r10, r24
 24e:	b1 2c       	mov	r11, r1
 250:	18 b8       	out	0x08, r1	; 8



		if(tens>0x30)
 252:	c0 33       	cpi	r28, 0x30	; 48
 254:	d1 05       	cpc	r29, r1
 256:	09 f1       	breq	.+66     	; 0x29a <main+0xb6>
		{
			LCD_set_cursor(1,13);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	6d e0       	ldi	r22, 0x0D	; 13
 25c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_set_cursor>
}

void LCD_write(unsigned char data)				// Writing a character
{

	LCD_ctrl = (1<<rs)|(0<<rw)|(1<<en);
 260:	d5 b8       	out	0x05, r13	; 5
	LCD_ctrl = 0X05;
 262:	d5 b8       	out	0x05, r13	; 5
	LCD_DATA= data;
 264:	cb b9       	out	0x0b, r28	; 11
 266:	c7 01       	movw	r24, r14
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0x84>
	_delay_ms(1);
	LCD_ctrl = (1<<rs)|(0<<rw)|(0<<en);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	85 b9       	out	0x05, r24	; 5
 270:	c7 01       	movw	r24, r14
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x8e>

		if(tens>0x30)
		{
			LCD_set_cursor(1,13);
			LCD_write(tens);
			if(tens == 0x3a)
 276:	ca 33       	cpi	r28, 0x3A	; 58
 278:	d1 05       	cpc	r29, r1
 27a:	79 f4       	brne	.+30     	; 0x29a <main+0xb6>
			{
				LCD_set_cursor(1,0);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_set_cursor>
				LCD_String_Write("time count ");
 284:	89 e1       	ldi	r24, 0x19	; 25
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_String_Write>
 28c:	80 e1       	ldi	r24, 0x10	; 16
 28e:	97 e2       	ldi	r25, 0x27	; 39
 290:	f5 01       	movw	r30, r10
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <main+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 296:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 298:	d9 f7       	brne	.-10     	; 0x290 <main+0xac>
				_delay_ms(1000);

			}

		}
		LCD_set_cursor(1,14);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	6e e0       	ldi	r22, 0x0E	; 14
 29e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_set_cursor>
}

void LCD_write(unsigned char data)				// Writing a character
{

	LCD_ctrl = (1<<rs)|(0<<rw)|(1<<en);
 2a2:	d5 b8       	out	0x05, r13	; 5
	LCD_ctrl = 0X05;
 2a4:	d5 b8       	out	0x05, r13	; 5
	LCD_DATA= data;
 2a6:	0b b9       	out	0x0b, r16	; 11
 2a8:	c7 01       	movw	r24, r14
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0xc6>
	_delay_ms(1);
	LCD_ctrl = (1<<rs)|(0<<rw)|(0<<en);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	c7 01       	movw	r24, r14
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0xd0>
 2b8:	88 ee       	ldi	r24, 0xE8	; 232
 2ba:	93 e0       	ldi	r25, 0x03	; 3
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	f5 01       	movw	r30, r10
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0xda>
 2c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <main+0xd8>

		}
		LCD_set_cursor(1,14);
		LCD_write(ones);
		_delay_ms(100);
		ones++;
 2c6:	0f 5f       	subi	r16, 0xFF	; 255
 2c8:	1f 4f       	sbci	r17, 0xFF	; 255
		if(ones == 0x3a)
 2ca:	0a 33       	cpi	r16, 0x3A	; 58
 2cc:	11 05       	cpc	r17, r1
 2ce:	19 f4       	brne	.+6      	; 0x2d6 <main+0xf2>
		{
			tens++;
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	00 e3       	ldi	r16, 0x30	; 48
 2d4:	10 e0       	ldi	r17, 0x00	; 0
			ones=0x30;
		}

		if(!(bit_is_set(PINC,PC0)))
 2d6:	30 99       	sbic	0x06, 0	; 6
 2d8:	bb cf       	rjmp	.-138    	; 0x250 <main+0x6c>
		{
			setclk=0;
			LCD_set_cursor(1,0);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_set_cursor>
			LCD_String_Write("-interrupt- ");
 2e2:	85 e2       	ldi	r24, 0x25	; 37
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_String_Write>
		}

	}

	return 0;
}
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	df 90       	pop	r13
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	08 95       	ret

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
