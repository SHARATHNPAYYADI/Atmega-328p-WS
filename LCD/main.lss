
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000001fe  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000057  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004dd  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000138  00000000  00000000  000007e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000360  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d8  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001fe  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  8e:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_cmd>:
}


void LCD_cmd(unsigned char cmd)
{
LCD_ctrl =(0<<RS)|(0<<RS)|(1<<EN);
  96:	94 e0       	ldi	r25, 0x04	; 4
  98:	95 b9       	out	0x05, r25	; 5
//LCD_ctrl = 0X04;
LCD_DATA=cmd;
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	84 ef       	ldi	r24, 0xF4	; 244
  9e:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	28 ec       	ldi	r18, 0xC8	; 200
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_cmd+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ac:	d9 f7       	brne	.-10     	; 0xa4 <LCD_cmd+0xe>

_delay_ms(50);
LCD_ctrl =(0<<RS)|(0<<RW)|(0<<EN);
  ae:	15 b8       	out	0x05, r1	; 5
  b0:	84 ef       	ldi	r24, 0xF4	; 244
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	28 ec       	ldi	r18, 0xC8	; 200
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_cmd+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c0:	d9 f7       	brne	.-10     	; 0xb8 <LCD_cmd+0x22>
//LCD_ctrl = 0X00;
_delay_ms(50);

}
  c2:	08 95       	ret

000000c4 <init_LCD>:



void init_LCD(void)
{
	LCD_cmd(Bit8_mode);                            // initialization of 8bit mode
  c4:	88 e3       	ldi	r24, 0x38	; 56
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
  cc:	84 ef       	ldi	r24, 0xF4	; 244
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	28 ec       	ldi	r18, 0xC8	; 200
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <init_LCD+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  dc:	d9 f7       	brne	.-10     	; 0xd4 <init_LCD+0x10>
	_delay_ms(50);
	
	LCD_cmd(CLEAR_LCD);                                 // clear LCD
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	28 ec       	ldi	r18, 0xC8	; 200
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <init_LCD+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <init_LCD+0x2a>
	_delay_ms(50);
	
	LCD_cmd(SET_CURSOR);                        // Setting cursor ON
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
 100:	84 ef       	ldi	r24, 0xF4	; 244
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	28 ec       	ldi	r18, 0xC8	; 200
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <init_LCD+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d9 f7       	brne	.-10     	; 0x108 <init_LCD+0x44>
	_delay_ms(50);
	
	LCD_cmd(LINE_1);                     // —8 go to first line and –0 is for 0th position
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
 11a:	84 ef       	ldi	r24, 0xF4	; 244
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	28 ec       	ldi	r18, 0xC8	; 200
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <init_LCD+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 128:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12a:	d9 f7       	brne	.-10     	; 0x122 <init_LCD+0x5e>
	_delay_ms(50);

}
 12c:	08 95       	ret

0000012e <LCD_write>:

void LCD_write(unsigned char data)				// Writing a character
{
	
	LCD_ctrl = (1<<RS)|(0<<RW)|(1<<EN);
 12e:	95 e0       	ldi	r25, 0x05	; 5
 130:	95 b9       	out	0x05, r25	; 5
	//LCD_ctrl = 0X05;
	LCD_DATA= data;
 132:	8b b9       	out	0x0b, r24	; 11
 134:	84 ef       	ldi	r24, 0xF4	; 244
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	28 ec       	ldi	r18, 0xC8	; 200
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_write+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <LCD_write+0xe>
	_delay_ms(50);
	LCD_ctrl = (1<<RS)|(0<<RW)|(0<<EN);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	85 b9       	out	0x05, r24	; 5
 14a:	84 ef       	ldi	r24, 0xF4	; 244
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	28 ec       	ldi	r18, 0xC8	; 200
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_write+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	d9 f7       	brne	.-10     	; 0x152 <LCD_write+0x24>
	//LCD_ctrl = 0x01;
	_delay_ms(50);

}
 15c:	08 95       	ret

0000015e <LCD_String_Write>:

void LCD_String_Write(unsigned char *string)             //store address value of the string in pointer *string
{
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	ec 01       	movw	r28, r24
 168:	08 ec       	ldi	r16, 0xC8	; 200
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	0a c0       	rjmp	.+20     	; 0x182 <LCD_String_Write+0x24>
	int i=0;
	while(string[i]!= '\0')                               // Loop will execute till it detects null character
{
	LCD_write(string[i]);                            // sending data on LCD byte by byte
 16e:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_write>
 172:	88 ee       	ldi	r24, 0xE8	; 232
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	f8 01       	movw	r30, r16
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_String_Write+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	d9 f7       	brne	.-10     	; 0x176 <LCD_String_Write+0x18>
 180:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_String_Write(unsigned char *string)             //store address value of the string in pointer *string
{
	int i=0;
	while(string[i]!= '\0')                               // Loop will execute till it detects null character
 182:	88 81       	ld	r24, Y
 184:	88 23       	and	r24, r24
 186:	99 f7       	brne	.-26     	; 0x16e <LCD_String_Write+0x10>
	LCD_write(string[i]);                            // sending data on LCD byte by byte
	i++;
	_delay_ms(100);
}

}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <main>:
void init_LCD(void);
void LCD_write(unsigned char data);
void LCD_Sting_Write(unsigned char *string) ;
int main(void)
{
	DDRD|=0xFF;                                  // setting the port D as output
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	8a b9       	out	0x0a, r24	; 10
	DDRB|=0X07;                                // setting for port B pin 0,1,2 as output
 198:	84 b1       	in	r24, 0x04	; 4
 19a:	87 60       	ori	r24, 0x07	; 7
 19c:	84 b9       	out	0x04, r24	; 4
	init_LCD();                                 // initialization of LCD
 19e:	0e 94 62 00 	call	0xc4	; 0xc4 <init_LCD>
 1a2:	88 ee       	ldi	r24, 0xE8	; 232
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	28 ec       	ldi	r18, 0xC8	; 200
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <main+0x18>
	_delay_ms(100);                        		
	LCD_String_Write("welcome to");                    
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String_Write>
 1bc:	88 e8       	ldi	r24, 0x88	; 136
 1be:	93 e1       	ldi	r25, 0x13	; 19
 1c0:	28 ec       	ldi	r18, 0xC8	; 200
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1cc:	d9 f7       	brne	.-10     	; 0x1c4 <main+0x32>
	_delay_ms(500);
	LCD_cmd(LINE_2);                                   //Line 2 command
 1ce:	80 ec       	ldi	r24, 0xC0	; 192
 1d0:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
	LCD_String_Write("atmega workshop");					
 1d4:	8b e0       	ldi	r24, 0x0B	; 11
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String_Write>
 1dc:	88 e8       	ldi	r24, 0x88	; 136
 1de:	93 e1       	ldi	r25, 0x13	; 19
 1e0:	28 ec       	ldi	r18, 0xC8	; 200
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <main+0x52>
	LCD_String_Write("Prof. Varun M");
	_delay_ms(500);
	LCD_cmd(0XD4);									//Line 4 command
	LCD_String_Write("Manager Vemula");
	_delay_ms(100);*/
	LCD_cmd(0X0F);	             // blink the cursor after printing is done
 1ee:	8f e0       	ldi	r24, 0x0F	; 15
 1f0:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_cmd>
	return 0;
}
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
